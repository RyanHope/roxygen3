* run tests
* fix usage of rd_command and *_tag

* "tags" that previously applied to all blocks:
  * docType

Questions for Vitalie:

* How would you write modify_tags?
* procBlockObject vs procBlock - only three tags need to dispatch on object
  * need to think of common function name for that scenario 
    procObj(tag, obj, block)

* What's a better way of writing procBlock for docType so that it doesn't use
  pseudo dispatch

* Should procTag be initTag?

# Bundles

A bundle represents a list of blocks, and how they should be processed (represented by a Processor)

Bundles take care of sourcing the code appropriately, breaking the source code into blocks and then processing each block. Need the following types of bundle:

* package
* directory
* file
* text block

# Processor

A processor stores information about what should be done with a bundle: which tags should be processed, what roccers should be run on the bundle as a whole, and what output should be written. It also stores the output directory.

# Extension

Extension of roxygen3 should be through adding new tags, new processors and new writers. It is not desirable for extensions to work "invisibly" - i.e. it is ok to demand that if you want to use an extension you must manually specify a tag, a processor or a writer.

# Objects/calls

docTypes: s3method, s3generic, s4method, s4generic, s4class, function, r5class, data, package

@docType data - adds format, keywords and docType
@docType package - adds docType, and package alias, if needed

The docType is determined from @docType or by matching the call with known types. This is used to instantiate a class of ObjectS3Method, ObjectS4Class, ObjectFunction etc, initialised with the call, environment, srcref.

Currently automatically added tags include: 

* @name
* @rdname
* @usage
* @defaultExports
* @format
* @keywords
* @docType

These are added through the following process: for each object, find all methods of objectDefaults that have a second argument that match this function. If the first argument matches a tag already present, don't call it. objectDefaults should return a tag object.

setGeneric("objectDefaults", function(tag, object) standardGeneric("object")) setMethod("objectDefaults", c("TagUsage", "ObjectFunction")) setMethod("objectDefaults", c("TagUsage", "ObjectS4Generic")) setMethod("objectDefaults", c("TagUsage", "ObjectS3Generic")) setMethod("objectDefaults", c("TagDefaultExports", "ObjectS3Generic")) setMethod("objectDefaults", c("TagDefaultExports", "ObjectS3Method")) setMethod("objectDefaults", c("TagFormat", "ObjectPackage")) setMethod("objectDefaults", c("TagDoctype", "ObjectData"))

# S4 usage questions

How do you name subclasses?

setClass("Animal")

1. setClass("AnimalChicken", contains = "Animal")
2. setClass("ChickenAnimal", contains = "Animal")
3. setClass("Chicken", contains = "Animal")

How do you create a new class?

1. new("Chicken", name = "Andy")

2. # Or create a constructor function and do:
Chicken("Andy")

